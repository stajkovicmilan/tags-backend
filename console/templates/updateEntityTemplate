import { types } from "../../dependency-injection/";
import { ActionContext } from "../ActionBase";
import * as Exceptions from "../../core/infrastructure/exceptions/";
import * as Services from "../../services/";
import * as Repositories from "../../repositories";
import * as Entities from "../../entities/";
import { injectable, inject } from "inversify";
import * as Joi from "joi";
import { AuthorizedActionBase } from "../AuthorizedActionBase";

@injectable()
export class Update{{EntityName}} extends AuthorizedActionBase<Entities.I{{EntityName}}> {

  public static constraints = {
    id: Joi.object().required(),
    data: Joi.any().required(),
  };

  public static alias = "Update{{EntityName}}";

  constructor(@inject(types.I{{EntityName}}Repository) private {{entityName}}Repo: Repositories.I{{EntityName}}Repository) {
    super();
  };

  public async execute(context: ActionContext): Promise<Entities.I{{EntityName}}> {
    let entity: Entities.I{{EntityName}} = await this.{{entityName}}Repo.findOne({ id: context.params.id });
    if (!entity) {
        throw new Exceptions.EntityNotFoundException("{{EntityName}}", context.params.id);
    }
    entity = Object.assign(entity, context.params.data);
    return await this.{{entityName}}Repo.update(entity);
  }

  protected async onActionExecuting(context: ActionContext): Promise<ActionContext> {
    return context;
  }

  protected async onActionExecuted(result: Entities.I{{EntityName}}): Promise<Entities.I{{EntityName}}> {
    return result;
  }

  protected getConstraints(): any {
    return Update{{EntityName}}.constraints;
  }
}
